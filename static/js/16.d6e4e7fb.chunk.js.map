{"version":3,"file":"static/js/16.d6e4e7fb.chunk.js","mappings":"iOAGaA,EAAY,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC1B,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOC,EAAP,KAAoBC,EAApB,KAaA,OACE,kBAAMH,SARa,SAAAI,GACnBA,EAAEC,iBACFC,QAAQC,IAAI,SAAUL,GAEtBF,EAASE,EACV,EAGC,WACE,kBACEM,UAAU,GACVC,KAAK,OACLC,WAAS,EACTC,SAjBe,SAAAP,GACnBD,EAAeC,EAAEQ,OAAOC,MAAMC,OAAOC,cACtC,KAiBG,mBAAQN,KAAK,SAAb,sBAGL,E,SCoCD,EA3De,WAAO,IAAD,EACnB,GAA0CR,EAAAA,EAAAA,UAAS,IAAnD,eAAOe,EAAP,KAAsBC,EAAtB,KACA,GAAwBhB,EAAAA,EAAAA,UAAS,GAAjC,eAAOiB,EAAP,KAAaC,EAAb,KACA,GAAsClB,EAAAA,EAAAA,WAAS,GAA/C,eAAOmB,EAAP,KAAoBC,EAApB,KAEMC,GAAWC,EAAAA,EAAAA,MAEjB,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAK,UAAGF,EAAaG,IAAI,gBAApB,QAAgC,GAkC3C,OAlBAC,EAAAA,EAAAA,YAAU,WACM,KAAVF,EAKJG,EAAAA,GAAuBH,EAAOT,GAC3Ba,MAAK,SAAAC,GACJX,GAAe,GACK,IAAhBW,EAAKC,QAAcZ,GAAe,GAEtCJ,EAAiBe,EAClB,IACAE,OAAM,SAAAC,GACL7B,QAAQC,IAAI4B,EACb,IAbDd,GAAe,EAclB,GAAE,CAACH,EAAMS,KAGR,4BACE,SAAC5B,EAAD,CAAWC,SAlCK,SAAAE,GAGlB,GAAIA,IAAgByB,EAApB,CAEA,GAAoB,KAAhBzB,EACF,OAAOwB,EAAgB,CAAC,GAG1BT,EAAiB,IACjBE,EAAQ,GACRO,EAAgB,CAAEC,MAAOzB,GARQ,CASlC,KAuBG,wBACGc,EAAcoB,KAAI,SAAAC,GAAI,OACrB,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAKE,IAAMC,MAAO,CAAEC,KAAMnB,GAA/C,SACGe,EAAKK,SAFDL,EAAKE,GADO,MAQxBnB,GAAe,wBAGrB,C,+LC5DKuB,EAAW,gCACXC,EAAU,mCAET,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,EAAAA,EAAAA,IAAA,UAClBH,EADkB,sCACoBC,IAFtC,cACCG,EADD,yBAOEA,EAASC,MAPX,kEAUA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAkCtB,EAAOT,GAAzC,uFACkB4B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,gCACcC,EADd,iCAC8CjB,EAD9C,iBAC4DT,EAD5D,yBADlB,cACC6B,EADD,yBAMEA,EAASC,KAAKE,SANhB,kEASA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAiCZ,GAAjC,uFACkBO,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDJ,EADC,oBACaK,EADb,oBADlB,cACCG,EADD,yBAMEA,EAASC,MANX,kEASA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA8Bb,GAA9B,uFACkBO,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDJ,EADC,4BACqBK,EADrB,oBADlB,cACCG,EADD,yBAMEA,EAASC,KAAKK,MANhB,kEASA,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAiCf,EAAIrB,GAArC,uFACkB4B,EAAAA,EAAAA,IAAA,UAClBH,EADkB,iBACDJ,EADC,4BACqBK,EADrB,gCACoD1B,IAFtE,cACC6B,EADD,yBAMEA,EAASC,KAAKE,SANhB,kE","sources":["components/SearchBar/SearchBar.jsx","pages/MoviesPage.js","servises/api.js"],"sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SearchBar = ({ onSubmit }) => {\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleChange = e => {\n    setSearchQuery(e.target.value.trim().toLowerCase());\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log('query:', searchQuery);\n\n    onSubmit(searchQuery);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        className=\"\"\n        type=\"text\"\n        autoFocus\n        onChange={handleChange}\n      ></input>\n      <button type=\"submit\">Search</button>\n    </form>\n  );\n};\n\nSearchBar.propTypes = {\n\tonSubmit: PropTypes.func.isRequired,\n };\n ","import { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { SearchBar } from 'components/SearchBar/SearchBar';\nimport { useEffect, useState } from 'react';\nimport * as API from '../servises/api';\n\nconst Movies = () => {\n  const [moviesBySeach, setMoviesBySeach] = useState([]);\n  const [page, setPage] = useState(1);\n  const [showMessage, setShowMessage] = useState(false);\n\n  const location = useLocation();\n\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  const changeQuery = searchQuery => {\n   //  console.log(searchQuery);\n\n    if (searchQuery === query) return;\n\n    if (searchQuery === '') {\n      return setSearchParams({});\n    }\n\n    setMoviesBySeach([]);\n    setPage(1);\n    setSearchParams({ query: searchQuery });\n  };\n\n  useEffect(() => {\n    if (query === '') {\n      setShowMessage(false);\n      return; //перший рендер\n    }\n\n    API.fetchSerchedMovies(query, page)\n      .then(resp => {\n        setShowMessage(false);\n        if (resp.length === 0) setShowMessage(true);\n        //   setMoviesBySeach(moviesBySeach => [...moviesBySeach, ...resp]);\n        setMoviesBySeach(resp);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [page, query]);\n\n  return (\n    <div>\n      <SearchBar onSubmit={changeQuery} />\n      <ul>\n        {moviesBySeach.map(item => (\n          <li key={item.id}>\n            <Link to={`/movies/${item.id}`} state={{ from: location }}>\n              {item.title}\n            </Link>\n          </li>\n        ))}\n      </ul>\n      {showMessage && 'No matching results'}\n    </div>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '54ca32600b8d3533c486c2b7fe8c8efb';\n\nexport async function fetchPopularMovies() {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n\n//   console.log('responce-popular:', response.data);\n\n  return response.data;\n}\n\nexport async function fetchSerchedMovies(query, page) {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=${page}&include_adult=false`\n  );\n//   console.log('responce-serched:', response.data.results);\n\n  return response.data.results;\n}\n\nexport async function fetchMovieDetails(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n//   console.log('responce-details:', response.data);\n\n  return response.data;\n}\n\nexport async function fetchMovieCast(id) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n//   console.log('responce-cast:', response.data.cast);\n\n  return response.data.cast;\n}\n\nexport async function fetchMovieReviews(id, page) {\n  const response = await axios.get(\n    `${BASE_URL}movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=${page}`\n  );\n//   console.log('responce-reviews:', response.data.results);\n\n  return response.data.results;\n}\n"],"names":["SearchBar","onSubmit","useState","searchQuery","setSearchQuery","e","preventDefault","console","log","className","type","autoFocus","onChange","target","value","trim","toLowerCase","moviesBySeach","setMoviesBySeach","page","setPage","showMessage","setShowMessage","location","useLocation","useSearchParams","searchParams","setSearchParams","query","get","useEffect","API","then","resp","length","catch","error","map","item","to","id","state","from","title","BASE_URL","API_KEY","fetchPopularMovies","axios","response","data","fetchSerchedMovies","results","fetchMovieDetails","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}